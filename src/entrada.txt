int variable = 3, b, c= 4;
float metodo () {
    double a = 3;
    if(a < b){
        a--;
    }
}

int val1 = 2+1-sizeof(d);
int va3, val;

struct s{
    int x;
};

struct hola{
    int val, x;
    char asd[10];
    struct s valor;
};


int main(int hola, char adios){
    node.hola[2].adios[3].sifunca = 3;
    d[10] = d;
    char c[15] = d;
    struct hola st;
    st.valor.x = 5;
    struct hola st;
    st->valor->x = 5;
    c[15] = adios[10][15];
    int val = 1+5*2/3, text = "asd";
    hola:
    for(int x=0; x<5; ++x){
        printf("%d", x);
    }
    goto hola;
    a = a + 1;
    return 0;
}

int prod(){
    switch(x){
        case 5<7:
            printf("h");
            break;
        case 2:
            printf("h");
        default:
            printf("asdf");
    }

    while(x < 0){
        printf("%d", x+5);
        x++;
    }

    do{
        printf("adf");
    }while(5+20<10 != 3 /4%2<<3);

    addd = 5+5+5;
    addd++;
    //if(addd == 16 ? 1 : 0){
        //printf("asdf");
    //}
}


//validacion gramatica segun enunciado 
int main()
{
    int x = 0;
    int a = 0;
    while(x < 4){
        a = a + x;
        x = x + 1;
    }
    printf("%d", a);
}

// multiples llamadas a funciones
int f2(int a ){
    return a*a;
}

int f1(int a ){
    return f2(a);
}
int main(){
    int a = 5;
    a = f1(a);
    printf("%d",a);
}

//funcion factorial recursiva
int fact(int a){
    if (a > 1){
        return a*fact(a-1);
    }
    return 1;
}

int main (){
    printf("%d", fact(3));
}


//struct con arreglos
struct punto{
    int x,y;
};

int main(){
    punto lista[2];
    lista[0].x = 0;
    lista[0].y = 0;
    lista[1].x = 5;
    lista[1].y = 5;
    printf("%d %d \n",lista[0].x, lista[0].y);
    printf("%d %d \n",lista[1].x, lista[1].y);

}


//lista simplemente enlazada con struct y punteros
struct nodo{
    int valor;
    struct nodo *siguiente;
};

int agregar(struct nodo **temp, int valor){
    struct nodo* nuevo = (struct nodo*) malloc(sizeof(struct nodo));
    nuevo->valor = valor;
    nuevo->siguiente = (temp);
    temp = nuevo;
}

int imprimir(struct nodo *temp){
    while(temp != 0){
        printf("%d ", temp->valor);
        temp = temp->siguiente;
    }
}

int main(){
    struct nodo *lista = 0;
    agregar(&lista,20);
    agregar(&lista,15);
    agregar(&lista,10);
    imprimir(lista);
}